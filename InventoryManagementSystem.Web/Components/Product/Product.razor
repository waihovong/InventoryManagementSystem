@using Microsoft.AspNetCore.Mvc
@using Models;
@using InventoryManagementSystem.API.DTO;
@inject InventoryManagementSystem.API.Controllers.Product.ProductController _productController;

@{
    var validProducts = Products.Where(p => !string.IsNullOrEmpty(p.ProductName)).OrderBy(a => a.ProductId);
}
<div class="rounded bg-[#2C333A] p-3 text-white backdrop-blur-sm" @onclick="CloseMenu">
    <h3 class="p-2 text-base font-medium">Products <span class="text-xs text-[#B3B9C4]">(@Products.Count() products)</span></h3>
    <div class="overflow-x-auto">
        <table class="w-full table-fixed border-collapse border-slate-800">
            <thead>
                <tr class="text-sm text-[#B3B9C4]">
                    <th class="w-1/5 p-2 text-left font-medium capitalize">Name</th>
                    <th class="w-1/3 p-2 text-left font-medium capitalize">Description</th>
                    <th class="w-1/12 p-2 text-left font-medium capitalize">Quantity</th>
                    <th class="w-1/4 p-2 text-left font-medium capitalize">Information</th>
                    <th class="w-1/12 font-medium">Action</th>
                </tr>
            </thead>
            <tbody class="text-base">
                @foreach (var product in validProducts)
                {
                    <tr class="border-t-0 border-l-0 border-r-0 border-b-0 text-sm hover:bg-[#282E33] hover:cursor-pointer"
                        @onclick="() => SelectedProduct(product.ProductId)">
                        <td class="truncate p-3">@product.ProductName</td>
                        <td class="truncate p-3">@product.Description</td>
                        <td class="p-3 text-center">@product.Quantity</td>
                        <td class="truncate p-3">@product.AdditionalInfo</td>
                        <td class="p-3 text-center">
                            <span class="rounded p-1 hover:bg-gray-400 hover:cursor-pointer"
                                  @onclick:stopPropagation="true"
                                  @onclick="() => MenuItem(product.ProductId)">. . .</span>
                        </td>
                    </tr>
                    @if (selectedProductId == product.ProductId && selectedProductId != null)
                    {
                        <tr>
                            <td colspan="5">
                                <div class="ring-1 ring-opacity-5 w-48 rounded-md bg-white shadow-lg ring-black"
                                     @onclick:stopPropagation="true">
                                    <div class="py-1" role="menu" aria-orientation="vertical" aria-labelledby="options-menu">
                                        <a href="#" class="block px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100"
                                           role="menuitem" @onclick="() => EditProduct(product)">Edit</a>
                                        <a href="#" class="block px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100"
                                           role="menuitem" @onclick="() => DeleteProduct(product)">Delete</a>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>


@code {
    [Parameter]
    public IEnumerable<ProductViewModel> Products { get; set; } = new List<ProductViewModel>();

    private bool isEdit = false;
    private bool isDelete = false;

    private int? selectedProductId;

    [Parameter]
    public EventCallback<ProductViewModel> EditSelectedProduct { get; set; }

    [Parameter]
    public EventCallback<ProductViewModel> DeleteSelectedProduct { get; set; }

    [Parameter]
    public EventCallback<int> ViewSelectedProduct { get; set; }

    private async Task EditProduct(ProductViewModel product)
    {
        isEdit = !isEdit;
        selectedProductId = null;
        await EditSelectedProduct.InvokeAsync(product);
        StateHasChanged();
    }

    private async Task DeleteProduct(ProductViewModel product)
    {
        isDelete = !isDelete;
        selectedProductId = null;
        await DeleteSelectedProduct.InvokeAsync(product);
        StateHasChanged();
    }

    private void MenuItem(int productId)
    {
        selectedProductId = selectedProductId == productId ? null : productId;
        StateHasChanged();
    }

    private void CloseMenu()
    {
        selectedProductId = null;
    }

    private async void SelectedProduct(int productId)
    {
        await ViewSelectedProduct.InvokeAsync(productId);
    }

}
