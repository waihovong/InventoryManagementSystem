@using Microsoft.AspNetCore.Mvc
@using Models;
@using InventoryManagementSystem.API.DTO;
@inject InventoryManagementSystem.API.Controllers.Product.ProductController _productController;
@using System.Timers;

<div class="mt-5 flex justify-center">
    <div class="flex w-full flex-col gap-4">
        <div class="flex gap-4">
            <div class="flex w-full flex-col gap-4">
                <div class="flex items-center justify-between gap-4">
                    <div>
                        <p class="text-lg font-medium text-white">Inventory System</p>
                    </div>
                    <div class="flex h-full items-center justify-end gap-4">
                        <div class="relative flex h-full flex-col items-center">
                            <div class="h-full">
                                <input 
                                    @onclick="HandleProductSearch"
                                    @oninput="SearchProduct"
                                    value="@SearchProductText"
                                    class="h-full w-full rounded bg-[#35434c] pl-2 text-sm font-medium text-white" type="text" placeholder="Search" />
                            </div>
                            @if(itemsFound)
                            {
                                <div class="z-10 absolute left-0 top-full w-full rounded bg-white text-sm font-medium text-black">
                                    @foreach(var product in SearchProducts)
                                    {
                                        <p class="p-3 hover:cursor-pointer hover:bg-slate-200"
                                            @onclick="(() => ViewSelectedProduct(product.ProductId))">
                                            @product.ProductName
                                        </p>
                                    }
                                </div>
                            }
                        </div>
                        <div>
                            <button class="rounded bg-[#0055CC] p-2 text-sm font-medium text-white hover:cursor-pointer" @onclick="AddProductAction">Add Product + </button>
                        </div>
                    </div>
                </div>
                <div class="flex h-full items-center justify-between gap-4 text-center text-white">
                    <div class="h-full w-full">
                        <div class="flex h-full flex-col justify-between rounded-lg bg-[#35434c] p-3 text-base">
                            <div class="font-medium">Inventory</div>
                            <div class="text-lg">@Products.Count()</div>
                        </div>
                    </div>
                    <div class="h-full w-full">
                        <div class="flex h-full flex-col justify-between gap-3 rounded-lg bg-[#35434c] p-3">
                            <div class="font-medium">Wish List</div>
                            <div class="text-lg">0</div>
                        </div>
                    </div>
                    <div class="h-full w-full">
                        <div class="flex h-full flex-col justify-between rounded-lg bg-[#35434c] p-3 text-base">
                            <div class="font-medium">Last Added</div>
                            <div class="text-sm">@Products.OrderByDescending(x => x.CreatedDate).FirstOrDefault()?.ProductName</div>
                        </div>
                    </div>
                    <div class="h-full w-full">
                        <div class="flex h-full flex-col justify-between rounded-lg bg-[#35434c] p-3 text-base">
                            <div class="font-medium">Last Edited</div>
                            <div>@Products.Where(p => p.ModifiedDate.HasValue).OrderByDescending(r => r.ModifiedDate.Value).FirstOrDefault()?.ProductName</div>
                        </div>
                    </div>
                </div>
                <InventoryManagementSystem.Web.Components.Product.Product 
                    EditSelectedProduct="EditSelectedProduct" 
                    DeleteSelectedProduct="DeleteSelectedProduct"
                    ViewSelectedProduct="ViewSelectedProduct"
                    Products="Products" />
            </div>
            <div class="flex w-full flex-col gap-4">
                <InventoryManagementSystem.Web.Components.Product.Latest Products="Products " />
                @if (viewSelectedProduct)
                {
                    <ProductOverview ProductId="selectedProductId" />
                }
            </div>
        </div>
    </div>
</div>
@if (isAddProduct)
{
    <AddProduct IsOpen="@isAddProduct"
        Created="ProductCreated"
        IsOpenChanged="IsOpenChangedDialog" />
}

@if (isEditProduct)
{
    <EditProduct IsOpen="@isEditProduct"
        IsOpenChanged="IsOpenEditChangedDialog"
        Updated="ProductUpdated"
        ProductId="@editProductId" />
}

@if (isDeleteProduct)
{
    <DeleteProduct 
        IsOpen="@isDeleteProduct"
        IsOpenChanged="IsOpenDeleteChangedDialog"
        Deleted="ProductDeleted"
        ProductId="@deleteProductId" />
}


@code {
    [Parameter]
    public IEnumerable<ProductViewModel> Products { get; set; }

    [Parameter]
    public EventCallback<bool> Created { get; set; }

    [Parameter]
    public EventCallback<bool> Updated { get; set; }

    [Parameter]
    public EventCallback<bool> Deleted { get; set; }

    public EventCallback<bool> IsOpenChanged { get; set; }

    public IEnumerable<ProductViewModel> SearchProducts { get; set; }

    public bool isAddProduct = false;
    public bool isEditProduct = false;
    public bool isDeleteProduct = false;

    public bool viewSelectedProduct = false;
    private bool itemsFound = false;

    private int editProductId;
    private int deleteProductId;
    private int selectedProductId;

    private string SearchProductText = string.Empty;

    private Timer _debounceTimer;

    public void AddProductAction()
    {
        isAddProduct = !isAddProduct;
        StateHasChanged();
    }

    public void IsOpenChangedDialog(bool isOpen)
    {
        isAddProduct = isOpen;
        StateHasChanged();
    }

    public void IsOpenEditChangedDialog(bool isOpen)
    {
        isEditProduct = isOpen;
        StateHasChanged();
    }

    public void IsOpenDeleteChangedDialog(bool isOpen)
    {
        isDeleteProduct = isOpen;
        StateHasChanged();
    }

    public void ProductCreated(bool isCreated)
    {
        if (isCreated)
        {
            Created.InvokeAsync(isCreated);
        }
    }

    public void EditSelectedProduct(ProductViewModel product)
    {
        if (product != null)
        {
            isEditProduct = !isEditProduct;
            editProductId = product.ProductId;
            StateHasChanged();
        }
    }

    public void DeleteSelectedProduct(ProductViewModel product)
    {
        if (product != null)
        {
            isDeleteProduct = !isDeleteProduct;
            deleteProductId = product.ProductId;
            StateHasChanged();
        }
    }

    public void ProductUpdated(bool isUpdated)
    {
        if (isUpdated)
        {
            Updated.InvokeAsync(isUpdated);
        }
    }

    public void ProductDeleted(bool isDeleted)
    {
        if (isDeleted)
        {
            Deleted.InvokeAsync(isDeleted);
        }
    }

    public void ViewSelectedProduct(int productId)
    {
        if (productId != 0)
        {
            selectedProductId = productId;
            viewSelectedProduct = true;
            StateHasChanged();
        }

        if (itemsFound)
        {
            itemsFound = false;
            StateHasChanged();
        }
    }

    public async Task HandleProductSearch()
    {
       if (!string.IsNullOrEmpty(SearchProductText))
        {
            await SearchProduct(new ChangeEventArgs { Value = SearchProductText });
        }
    }

    public async Task<IEnumerable<ProductViewModel>> SearchProduct(ChangeEventArgs e)
    {
        SearchProductText = e.Value?.ToString() ?? string.Empty;
        List<ProductViewModel> productSearchList = new List<ProductViewModel>();
        if (!string.IsNullOrEmpty(SearchProductText))
        {
            var productSearch = await _productController.SearchProducts(SearchProductText);
            if (productSearch.Result != null && productSearch.Result is OkObjectResult okObjectResult)
            {
                var productSearchDto = okObjectResult.Value as IEnumerable<ProductDTO>;
                itemsFound = true;
                productSearchList = MapProductView(productSearchDto).ToList();
                SearchProducts = productSearchList;
                StateHasChanged();
            }
        }
        else
        {
            itemsFound = false;
            StateHasChanged();
        }


        return productSearchList;
    }

    //Put this in a common file it's used several times in other files
    private IEnumerable<ProductViewModel> MapProductView(IEnumerable<ProductDTO> productDto)
    {
        if (productDto == null)
        {
            return Enumerable.Empty<ProductViewModel>();
        }

        var productView = productDto.Select(dto => new ProductViewModel
            {
                AdditionalInfo = dto.AdditionalInfo,
                ProductName = dto.ProductName,
                Quantity = dto.Quantity,
                Description = dto.Description,
                ProductId = dto.ProductId,
                CreatedDate = dto.CreatedDate,
                ModifiedDate = dto.ModifiedDate
            });

        return productView;
    }
}

