@using Models;
@using InventoryManagementSystem.API.DTO;

<div class="mt-5 flex justify-center">
    <div class="flex flex-col gap-4">
        <div class="flex gap-4">
            <div class="flex flex-col gap-4">
                <div class="flex items-center justify-between gap-4">
                    <div>
                        <p class="text-lg">Inventory System</p>
                    </div>
                    <div>
                        <button class="bg-[#0a0a0a] rounded p-2 text-sm font-medium text-white hover:cursor-pointer" @onclick="AddProductAction">Add Product</button>
                    </div>
                </div>
                <InventoryManagementSystem.Web.Components.Product.Product SelectedProduct="SelectedProduct" Products="Products" />
            </div>
            <div class="flex flex-col gap-4">
                <InventoryManagementSystem.Web.Components.Product.Latest Products="Products " />
            </div>
        </div>
    </div>
</div>
@if (isAddProduct)
{
    <AddProduct IsOpen="@isAddProduct"
        Created="ProductCreated"
        IsOpenChanged="IsOpenChangedDialog" />
}

@if (isEditProduct)
{
    <EditProduct IsOpen="@isEditProduct"
        IsOpenChanged="IsOpenEditChangedDialog"
        Updated="ProductUpdated"
        ProductId="@editProductId" />
}


@code {
    [Parameter]
    public IEnumerable<ProductViewModel> Products { get; set; } = new List<ProductViewModel>();

    [Parameter]
    public EventCallback<bool> Created { get; set; }

    [Parameter]
    public EventCallback<bool> Updated { get; set; }

    public EventCallback<bool> IsOpenChanged { get; set; }

    public bool isAddProduct = false;
    public bool isEditProduct = false;

    private int editProductId;

    public void AddProductAction()
    {
        isAddProduct = !isAddProduct;
        StateHasChanged();
    }

    public void IsOpenChangedDialog(bool isOpen)
    {
        isAddProduct = isOpen;
        StateHasChanged();
    }

    public void IsOpenEditChangedDialog(bool isOpen)
    {
        isEditProduct = isOpen;
        StateHasChanged();
    }

    public void ProductCreated(bool isCreated)
    {
        if (isCreated)
        {
            Created.InvokeAsync(isCreated);
        }
    }

    public void SelectedProduct(ProductViewModel product)
    {
        if (product != null)
        {
            isEditProduct = !isEditProduct;
            editProductId = product.ProductId;
            StateHasChanged();
        }
    }

    public void ProductUpdated(bool isUpdated)
    {
        if (isUpdated)
        {
            Updated.InvokeAsync(isUpdated);
        }
    }
}

