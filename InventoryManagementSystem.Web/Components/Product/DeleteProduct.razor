@using Microsoft.AspNetCore.Mvc
@using Models;
@using InventoryManagementSystem.API.DTO;
@inject InventoryManagementSystem.API.Controllers.Product.ProductController _productController;

<div class="flex items-center justify-center">
    <div class="dialog p-3"></div>
    <div style="z-index:10; position:absolute; top:0" class="bg-[#282E33] mt-8 w-fit rounded-xl p-6">
        <div class="flex justify-between">
            <span class="text-base text-lg font-medium text-white">Delete product?</span>
            <span class="flex justify-end hover:cursor-pointer"><span @onclick="IsClosed" class="text-lg font-medium text-white">x</span></span>
        </div>
        <div class="text-[#F1F2F4] mt-2">
            <p >Are you sure you want to delete this product? </p> <p>This action is irreversible, you will need to re-add.</p>
        </div>
        <div class="mt-3">
            <button class="flex w-full justify-center rounded bg-red-500 p-2 font-medium text-white hover:bg-red-600" @onclick="DeleteProductFromInventory">Yes, Delete</button>
        </div>
        <div class="mt-3">
            <span class="flex justify-center text-base font-medium text-white hover:cursor-pointer" @onclick="IsClosed">Cancel</span>
        </div>
    </div>
</div>

<style>
    .dialog {
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        background: black;
        opacity: 0.5;
    }
</style>

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public EventCallback<bool> Deleted { get; set; }

    [Parameter]
    public int ProductId { get; set; }

    public ProductViewModel ProductView { get; set; }

    public async Task IsClosed()
    {
        await IsOpenChanged.InvokeAsync(false);
    }

    protected override async Task OnParametersSetAsync()
    {
        ProductView = await GetProductById(ProductId);
    }

    public async Task DeleteProductFromInventory()
    {
        var deleteProduct = await _productController.DeleteProduct(ProductId);
        
        if (deleteProduct != null && deleteProduct is OkObjectResult okObjectResult)
        {
            await Deleted.InvokeAsync(true);
            await IsOpenChanged.InvokeAsync(false);
        }
    }

    public async Task<ProductViewModel> GetProductById(int productId)
    {
        ProductViewModel selectedProduct = new ProductViewModel();
        var product = await _productController.GetProduct(productId);
        if (product.Result != null && product.Result is OkObjectResult okObjectResult)
        {
            var productDto = okObjectResult.Value as ProductDTO;
            selectedProduct = MapProductView(productDto);
        }

        return selectedProduct;
    }

    private ProductViewModel MapProductView(ProductDTO productDto)
    {
        if (productDto == null)
        {
            return new ProductViewModel();
        }

        var productView = new ProductViewModel
            {
                ProductId = productDto.ProductId,
                ProductName = productDto.ProductName,
                Quantity = productDto.Quantity,
                Description = productDto.Description,
                AdditionalInfo = productDto.AdditionalInfo
            };
        return productView;
    }
}
