@using Microsoft.AspNetCore.Mvc
@using Models;
@using InventoryManagementSystem.API.DTO;
@inject InventoryManagementSystem.API.Controllers.Product.ProductController _productController;

<div class="flex items-center justify-center">
    <div class="dialog p-3"></div>
    <div style="z-index:10; position:absolute; top:0" class="bg-[#282E33] mt-8 w-fit rounded-xl p-6">
        <span class="text-lg font-medium text-white">Add Product</span>
        <div class="text-[#F1F2F4] text-base">Add a new product to your inventory</div>
        <div>
            <EditForm Model="Product" OnValidSubmit="AddProductToInventory">
                <DataAnnotationsValidator/>
                <div class="mb-2 mt-3">
                    <div class="mb-2">
                        <label class="text-base font-medium text-white">Name <span class="text-red-600">*</span></label>
                        <div>
                            <InputText @bind-Value="Product.ProductName" class="w-full rounded border border-stone-300 p-2 text-base"/>
                            <ValidationMessage class="text-xs text-red-600" For="() => Product.ProductName"/>
                        </div>
                    </div>
                    <div class="mb-2">
                        <label class="text-base font-medium text-white">Quantity </label>
                        <div>
                            <InputNumber @bind-Value="Product.Quantity" class="w-full rounded border border-stone-300 p-2 text-base" />
                        </div>
                    </div>
                </div>

                <div>
                    <label class="text-base font-medium text-white">Description <span class="text-red-600">*</span></label>
                    <div>
                        <InputTextArea @bind-Value="Product.Description" class="rounded border border-stone-300 p-2 text-base"/>
                        <ValidationMessage class="text-xs text-red-600" For="() => Product.Description" />
                    </div>
                </div>

                <div>
                    <label class="text-base font-medium text-white">Additional Info <span class="text-red-600"></span></label>
                    <div>
                        <InputTextArea @bind-Value="Product.AdditionalInfo" class="rounded border border-stone-300 p-2 text-base" />
                    </div>
                </div>

                <div class="mt-3 flex gap-4">
                    <div class="w-full">
                        <button @onclick="@IsClosed" class="w-full rounded bg-gray-400 p-2 text-base font-medium text-white hover:bg-gray-500">Close</button>
                    </div>
                    <div class="w-full">
                        <input type="submit" value="Add Product +" class="w-full cursor-pointer rounded bg-blue-600 p-2 text-base font-medium text-white hover:bg-blue-700"/>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<style>
    .dialog {
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        background: black;
        opacity: 0.5;
    }
</style>

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public EventCallback<bool> Created { get; set; }

    public Models.AddProduct Product { get; set; } = new Models.AddProduct();

    public async Task IsClosed()
    {
        await IsOpenChanged.InvokeAsync(false);
    }

    public async Task AddProductToInventory()
    {
        var productDto = new ProductCreateDTO
        {
            ProductName = Product.ProductName,
            Quantity = Product.Quantity,
            Description = Product.Description,
            AdditionalInfo = Product.AdditionalInfo,
            CreatedDate = DateTime.UtcNow
        };

        var product = await _productController.AddProduct(productDto);

        if (product.Result != null && product.Result is OkObjectResult okObjectResult)
        {
            await Created.InvokeAsync(true);
            await IsClosed();
        }
    }
}
