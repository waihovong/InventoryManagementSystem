@using Microsoft.AspNetCore.Mvc
@using Models;
@using InventoryManagementSystem.API.DTO;
@inject InventoryManagementSystem.API.Controllers.Product.ProductController _productController;

@if (!isLoading)
{
    <div class="flex items-center justify-center">
        <div class="dialog p-3"></div>
        <div style="z-index:10; position:absolute; top:0" class="mt-8 w-fit rounded-xl bg-white p-6">
            <span class="text-base font-medium">Add Product</span>
            <div class="text-base text-stone-600">Add a new product to your inventory</div>
            <div>
                <EditForm Model="ProductView" OnValidSubmit="EditProductInventory">
                    <div class="mb-2 mt-3">
                        <div class="mb-2">
                            <label class="text-base font-medium">Name <span class="text-red-600">*</span></label>
                            <div>
                                <InputText @bind-Value="ProductView.ProductName" class="w-full rounded-lg border border-stone-300 p-2 text-base" />
                            </div>
                        </div>
                        <div class="mb-2">
                            <label class="text-base font-medium">Quantity <span class="text-red-600">*</span></label>
                            <div>
                                <InputNumber @bind-Value="ProductView.Quantity" class="w-full rounded-lg border border-stone-300 p-2 text-base" />
                            </div>
                        </div>
                    </div>

                    <div>
                        <label class="text-base font-medium">Description <span class="text-red-600">*</span></label>
                        <div>
                            <InputTextArea @bind-Value="ProductView.Description" class="rounded-lg border border-stone-300 p-2 text-base" />
                        </div>
                    </div>

                    <div>
                        <label class="text-base font-medium">Additional Info <span class="text-red-600"></span></label>
                        <div>
                            <InputTextArea @bind-Value="ProductView.AdditionalInfo" class="rounded-lg border border-stone-300 p-2 text-base" />
                        </div>
                    </div>

                    <div class="mt-3 flex gap-4">
                        <div class="w-full">
                            <button @onclick="@IsClosed" class="w-full rounded-lg bg-gray-400 p-2 text-base font-medium text-white hover:bg-gray-500">Close</button>
                        </div>
                        <div class="w-full">
                            <input type="submit" value="Add Product +" class="w-full cursor-pointer rounded-lg bg-blue-600 p-2 text-base font-medium text-white hover:bg-blue-700" />
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<style>
    .dialog {
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        background: black;
        opacity: 0.5;
    }
</style>

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public EventCallback<bool> Updated { get; set; }

    [Parameter]
    public int ProductId { get; set; }

    public ProductViewModel ProductView { get; set; }

    private bool isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        ProductView = await GetProductById(ProductId);
        if (ProductView != null)
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public async Task IsClosed()
    {
        await IsOpenChanged.InvokeAsync(false);
    }

    public async Task<ProductViewModel> GetProductById(int productId)
    {
        ProductViewModel selectedProduct = new ProductViewModel();
        var product = await _productController.GetProduct(productId);
        if (product.Result != null && product.Result is OkObjectResult okObjectResult)
        {
            var productDto = okObjectResult.Value as ProductDTO;
            selectedProduct = MapProductView(productDto);
        }

        return selectedProduct;
    }

    private ProductViewModel MapProductView(ProductDTO productDto)
    {
        if (productDto == null)
        {
            return new ProductViewModel();
        }

        var productView = new ProductViewModel
        {
            ProductId = productDto.ProductId,
            ProductName = productDto.ProductName,
            Quantity = productDto.Quantity,
            Description = productDto.Description,
            AdditionalInfo = productDto.AdditionalInfo
        };
        return productView;
    }



    public async Task EditProductInventory()
    {
        var productDto = new ProductUpdateDTO
        {
            ProductId = ProductView.ProductId,
            ProductName = ProductView.ProductName,
            Quantity = ProductView.Quantity,
            Description = ProductView.Description,
            AdditionalInfo = ProductView.AdditionalInfo
        };

        var product = await _productController.UpdateProduct(productDto);

        if (product.Result != null && product.Result is OkObjectResult okObjectResult)
        {
            if (okObjectResult.Value != null && okObjectResult.StatusCode == 200)
            {
                await Updated.InvokeAsync(true);
                await IsOpenChanged.InvokeAsync(false);
            }
        }
    }
}
